//
//  X_PhotoDrawingVC.m
//  图像处理
//
//  Created by xiongyw on 15/4/22.
//  Copyright (c) 2015年 dx. All rights reserved.
//

#import "X_PhotoDrawingVC.h"

#import "X_Eternal.h"

#import "X_PhotoToolView.h"
#import "X_DrawingView.h"
#import "UIActionSheet+XBlock.h"

#import "X_Eternal.h"
#import "X_PhotoBrowser.h"
#import "X_PhotoDeal.h"

#define X_PhotoBottomHeight 44

@interface X_PhotoDrawingVC () <X_DrawingViewDelegate>

@property (nonatomic, copy) X_PhotoDrawingBlock photoDrawingBlock;

@property (nonatomic, strong) UIImage *originImg;

@property (nonatomic, strong) X_PhotoToolView *topView;//顶部菜单
@property (nonatomic, strong) X_PhotoToolView *bottomView;//底部菜单

@property (nonatomic, strong) X_DrawingView *drawingView; //图片涂鸦

@end

@implementation X_PhotoDrawingVC

- (void)okAction {
    [self dismissViewControllerAnimated:YES completion:^{
        if (self.photoDrawingBlock) {
            self.photoDrawingBlock(self.drawingView.image);
            self.photoDrawingBlock = nil;
        }
    }];
}

- (void)cancelAction {
    [self dismissViewControllerAnimated:YES completion:^{
        if (self.photoDrawingBlock) {
            self.photoDrawingBlock(nil);
            self.photoDrawingBlock = nil;
        }
    }];
}

- (void)clickAction:(UIBarButtonItem *)item {
    
    switch (item.tag) {
        case 101: {
            //返回
            [self.drawingView undoLastStep];
            [self updateButtonStatus];
            break;
        }
        case 102: {
            [self.drawingView redoLastStep];
            [self updateButtonStatus];
            break;
        }
        case 103: {
            [self.drawingView clear];
            [self updateButtonStatus];
            [self.drawingView loadImage:_originImg];
            break;
        }
        case 201: {
            UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:NSLocalizedString(@"Pleasechoose",nil)
                                                                     delegate:nil
                                                            cancelButtonTitle:NSLocalizedString(@"Confirm",nil)
                                                       destructiveButtonTitle:nil
                                                            otherButtonTitles:NSLocalizedString(@"Black",nil),NSLocalizedString(@"Red",nil),NSLocalizedString(@"Yellow",nil),NSLocalizedString(@"Blue",nil),NSLocalizedString(@"Green",nil), nil];
            actionSheet.actionSheetStyle = UIActionSheetStyleDefault;
            WEAKSELF
            [actionSheet showActionSheetViewWithCompleteBlock:^(NSInteger buttonIndex) {
                if (buttonIndex == 0) {
                    weakSelf.drawingView.lineColor = [UIColor blackColor];
                }
                if (buttonIndex == 1) {
                    weakSelf.drawingView.lineColor = [UIColor redColor];
                }
                if (buttonIndex == 2) {
                    weakSelf.drawingView.lineColor = [UIColor yellowColor];
                }
                if (buttonIndex == 3) {
                    weakSelf.drawingView.lineColor = [UIColor blueColor];
                }
                if (buttonIndex == 4) {
                    weakSelf.drawingView.lineColor = [UIColor greenColor];
                }
            }];
            [actionSheet showInView:self.view];
            break;
        }
        case 202: {
            UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:NSLocalizedString(@"Pleasechoose",nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"Confirm",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Brush",nil),NSLocalizedString(@"Straightline",nil),NSLocalizedString(@"Box",nil),NSLocalizedString(@"Round",nil), nil];
            actionSheet.actionSheetStyle = UIActionSheetStyleDefault;
            WEAKSELF
            [actionSheet showActionSheetViewWithCompleteBlock:^(NSInteger buttonIndex) {
                if (buttonIndex == 0) {
                    weakSelf.drawingView.drawTool = X_DrawingToolTypePen;
                }
                if (buttonIndex == 1) {
                    weakSelf.drawingView.drawTool = X_DrawingToolTypeLine;
                }
                if (buttonIndex == 2) {
                    weakSelf.drawingView.drawTool = X_DrawingToolTypeRectagleStroke;
                }
                if (buttonIndex == 3) {
                    weakSelf.drawingView.drawTool = X_DrawingToolTypeEllipseStroke;
                }
            }];
            [actionSheet showInView:self.view];
            break;
        }
        case 203: {
            UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:NSLocalizedString(@"Pleasechoose",nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"Confirm",nil) destructiveButtonTitle:nil otherButtonTitles:@"1",@"5",@"10",@"15", nil];
            actionSheet.actionSheetStyle = UIActionSheetStyleDefault;
            WEAKSELF
            [actionSheet showActionSheetViewWithCompleteBlock:^(NSInteger buttonIndex) {
                if (buttonIndex == 0) {
                    weakSelf.drawingView.lineWidth = 1;
                }
                if (buttonIndex == 1) {
                    weakSelf.drawingView.lineWidth = 5;
                }
                if (buttonIndex == 2) {
                    weakSelf.drawingView.lineWidth = 10;
                }
                if (buttonIndex == 3) {
                    weakSelf.drawingView.lineWidth = 15;
                }
            }];
            [actionSheet showInView:self.view];
            break;
        }
        default:
            break;
    }
}

- (void)updateButtonStatus {
    for (id item in _topView.subviews) {
        if ([item isKindOfClass:[UIToolbar class]]) {
            UIToolbar *bar = (UIToolbar *)item;
            for (UIBarButtonItem *btn in bar.items) {
                if (btn.tag == 101) {
                    btn.enabled = [self.drawingView canUndo];
                }
                if (btn.tag == 102) {
                    btn.enabled = [self.drawingView canRedo];
                }
                if (btn.tag == 103) {
                    btn.enabled = [self.drawingView canUndo];
                }
            }
        }
    }
}

- (instancetype)initWithImage:(UIImage *)originImg
                        block:(X_PhotoDrawingBlock)block {
    if ((self = [super init])) {
        _photoDrawingBlock = block;
        _originImg = originImg;
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [[UIApplication sharedApplication]setStatusBarHidden:NO];
    //增加中间试图0
    _topView = [[X_PhotoToolView alloc] initWithTop:CGRectMake(0, 0, SCREEN_WIDTH, X_PhotoBottomHeight+10)
                                                                  target:self
                                                                  action:@selector(clickAction:)];
    
    _bottomView = [[X_PhotoToolView alloc] initWithBottom:CGRectMake(0, X_ScreenFrame_Height - X_PhotoBottomHeight - X_NavBarHeight , X_ScreenFrame_Width, X_PhotoBottomHeight)
                                                   target:self
                                                   action:@selector(clickAction:)];
    
    [self.view addSubview:_topView];
    [self.view addSubview:_bottomView];
    
    [[UIApplication sharedApplication] setStatusBarHidden:NO];
    
    //中间涂鸦区域
    self.drawingView = [[X_DrawingView alloc] initWithFrame:CGRectMake(0, X_PhotoBottomHeight+10, X_ScreenFrame_Width, X_ScreenFrame_Height - 2*X_PhotoBottomHeight-10 - X_NavBarHeight-1)];
    self.drawingView.delegate = self;
    
    
    float imgWidth = _originImg.size.width;
    float imgHeight = _originImg.size.height;
    float viewWidth = self.drawingView.bounds.size.width;
    float viewHeight = self.drawingView.bounds.size.height;
    
    float widthRatio = imgWidth / viewWidth;
    float heightRatio = imgHeight / viewHeight;
    CGFloat scalingFactor = widthRatio > heightRatio ? widthRatio : heightRatio;
    
    self.drawingView.bounds = CGRectMake(0, 0, imgWidth / scalingFactor, imgHeight/scalingFactor);
    [self.drawingView loadImage:_originImg];
    [self.view addSubview:self.drawingView];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    
}

#pragma mark - ACEDrawing View Delegate

- (void)drawingView:(X_DrawingView *)view didEndDrawUsingTool:(id<X_DrawingTool>)tool {
    [self updateButtonStatus];
}

@end
